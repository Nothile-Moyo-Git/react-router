{"version":3,"file":"static/js/632.182f7bbf.chunk.js","mappings":"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","sources":["components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","components/pages/AllQuotes.js"],"sourcesContent":["import './QuoteItem.scss';\nimport { Link, Prompt } from 'react-router-dom';\nimport { useRef, useState } from 'react';\n\nconst QuoteItem = (props) => {\n\n  const inputRef = useRef();\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [isEntering, setIsEntering] = useState(false);\n\n  const deleteQuoteHandler = () => {\n    props.deleteQuote(props.id);\n  };\n\n  const toggleEditQuote = () => {\n    setShowEditForm(true);\n    props.setShowForm(true);\n  };\n\n  const hideFormHandler = () => {\n    setShowEditForm(false);\n    props.setShowForm(false);\n  }\n\n  const editQuoteHandler = (event) => {\n    event.preventDefault();\n    props.editQuote(props.id, inputRef.current.value, props.author);\n    submitFocusHandler();\n  };\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  const submitFocusHandler = () => {\n    setIsEntering(false);\n  }\n\n  return (\n    <li>\n      <Prompt \n        when={isEntering ===  true} \n        message={(location) => {\n          return 'Are you sure you want to leave? All your entered data will be lost!';\n          }}\n      />\n      { (showEditForm === true && props.showForm === true) &&\n        <form onSubmit={editQuoteHandler} className=\"item item--form\" onFocus={formFocusedHandler}>\n          <textarea\n            rows={5}\n            defaultValue={props.text}\n            ref={inputRef}\n          />\n          <div className='item__buttons item__buttons--horizontal'>\n            <button className=\"btn\">Submit</button>\n            <button className=\"btn\" onClick={hideFormHandler}>Cancel</button>\n          </div>\n        </form>\n      } \n\n      { ( showEditForm === false || props.showForm === false) &&\n        <div className=\"item\">\n          \n          <figure>\n            <blockquote>\n              <p>{props.text}</p>\n            </blockquote>\n            <figcaption>{props.author}</figcaption>\n          </figure>\n\n          <div className=\"item__buttons\">\n            <button className=\"btn\" onClick={toggleEditQuote}>Edit</button>\n            <Link to={`/quotes/${props.id}`} className=\"btn\">View Fullscreen</Link>\n          </div>\n\n          <button className='item__delete' onClick={deleteQuoteHandler}>x</button>\n          \n        </div>\n      }\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import QuoteItem from './QuoteItem';\nimport './QuoteList.scss';\nimport '../layout/Layout.scss';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n\n  const history = useHistory();\n\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n  };\n\n  const deleteQuoteHandler = (quoteId) => {\n    props.updateQuotes(quoteId);\n  };\n\n  const editQuoteHandler = (quoteId, quoteText, author) => {\n    props.editQuote(quoteId, quoteText, author);\n  };\n\n  return (\n    <section className=\"main\">\n      <div className=\"sorting\">\n        <button onClick={changeSortingHandler}>{`Sort ${isSortingAscending ? 'Descending' : 'Ascending'}`}</button>\n      </div>\n      <ul className=\"list\">\n        { sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n            deleteQuote={deleteQuoteHandler}\n            editQuote={editQuoteHandler}\n            showForm={props.showForm}\n            setShowForm={props.setShowForm}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default QuoteList;\n","import './NoQuotesFound.scss';\nimport { Link } from 'react-router-dom';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className=\"no-quotes\">\n      <p>No quote(s) found!</p>\n      <Link className='btn' to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import QuoteList from \"../quotes/QuoteList\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { quotesManager } from \"../../lib/api\";\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport NoQuotesFound from \"../quotes/NoQuotesFound\";\r\n\r\nconst AllQuotes = (props) => {\r\n\r\n    const { sendRequest, status, data: quotes, error } = useHttp(quotesManager, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest({method: 'fetch'});\r\n    },[sendRequest]);\r\n\r\n    const updateQuotesHandler = (quoteId) => {\r\n        sendRequest({method: 'delete', quoteId: quoteId});\r\n    }; \r\n\r\n    const editQuoteHandler = (quoteId, quoteText, author) => {\r\n        sendRequest({method: 'update', quoteId: quoteId, quoteText: quoteText, author: author});\r\n    }\r\n\r\n    if (status === 'pending') {\r\n        return(\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (status === 'error') {\r\n        return (\r\n            <p className=\"centered focused\">{error}</p>\r\n        );   \r\n    }\r\n\r\n    if (status === 'completed' && (!quotes || quotes.length === 0)) {\r\n        return(\r\n            <NoQuotesFound/>\r\n        );\r\n    }\r\n\r\n    return(\r\n        <QuoteList quotes={quotes} updateQuotes={updateQuotesHandler} editQuote={editQuoteHandler} showForm={props.showForm} setShowForm={props.setShowForm}/>\r\n    );\r\n    \r\n};\r\n\r\nexport default AllQuotes;"],"names":["props","inputRef","useRef","useState","showEditForm","setShowEditForm","isEntering","setIsEntering","submitFocusHandler","when","message","location","showForm","onSubmit","event","preventDefault","editQuote","id","current","value","author","className","onFocus","rows","defaultValue","text","ref","onClick","setShowForm","to","deleteQuote","quotes","ascending","history","useHistory","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","deleteQuoteHandler","quoteId","updateQuotes","editQuoteHandler","quoteText","push","pathname","map","quote","useHttp","quotesManager","sendRequest","status","data","error","useEffect","method","LoadingSpinner","length"],"sourceRoot":""}