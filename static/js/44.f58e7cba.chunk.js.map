{"version":3,"file":"static/js/44.f58e7cba.chunk.js","mappings":"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","sources":["components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","components/pages/QuoteDetail.js"],"sourcesContent":["import { useRef } from 'react';\r\nimport './NewCommentForm.scss';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { addComment } from '../../lib/api';\r\nimport { useState, useEffect } from 'react';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n\r\n  const { sendRequest, data, error, status } = useHttp(addComment, true);\r\n  const [ isSending, setIsSending ] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    if (status === 'completed' && !error){\r\n      props.onAddedComment(data);\r\n      setIsSending(false);\r\n    }\r\n \r\n  },[status, data, error, props]);\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n    // optional: Could validate here\r\n\r\n    setIsSending(true);\r\n    sendRequest({commentData: {text: commentTextRef.current.value}, quoteId: props.quoteId});\r\n  };\r\n\r\n  return (\r\n    <form className=\"form form--layout\" onSubmit={submitFormHandler}>\r\n      { (status === 'pending' && isSending) && <div className=\"centered\"><LoadingSpinner/></div> }\r\n      <div className=\"form form--layout\" onSubmit={submitFormHandler}>\r\n        <label htmlFor='comment'>Your Comment</label>\r\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\r\n      </div>\r\n      <div className=\"actions\">\r\n        <button className='btn'>Add Comment</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;\r\n","import './CommentItem.scss';\n\nconst CommentItem = (props) => {\n\n  const deleteCommentHandler = () => {\n    props.deleteComment(props.commentId, props.quoteId);\n  }\n\n  return (\n    <li className=\"comment-item\">\n      <p>{props.text}</p>\n      <button className=\"btn\" onClick={deleteCommentHandler}>Delete</button>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport './CommentsList.scss';\n\nconst CommentsList = (props) => {\n\n  const deleteCommentHandler = (commentId, quoteId) => {\n    props.updateComments(commentId, quoteId);\n  }\n\n  return (\n    <ul className=\"comments comments--list\">\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} commentId={comment.id} quoteId={props.quoteId} deleteComment={deleteCommentHandler}/>\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './Comments.scss';\r\nimport NewCommentForm from './NewCommentForm';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { commentsManager } from '../../lib/api';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport CommentsList from '../comments/CommentsList';\r\n\r\nconst Comments = (props) => {\r\n\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const { sendRequest, data: loadedComments, status } = useHttp(commentsManager, true);\r\n\r\n  // comment states\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n\r\n  // Start the add comment process by allowing the form to render\r\n  const startAddCommentHandler = () => {\r\n    setIsAddingComment(true);\r\n  };\r\n\r\n  // Added comment function which retrives the data\r\n  const addedCommentHandler = useCallback((commentId) => {    \r\n    sendRequest({method: 'fetch', quoteId: quoteId});\r\n    setIsAddingComment(false);\r\n  },[sendRequest, quoteId]);\r\n\r\n  const updateCommentHandler = (commentId, quoteId) => {\r\n    sendRequest({method: 'delete', quoteId: quoteId, commentId: commentId});\r\n  };\r\n\r\n  useEffect(() => {\r\n    sendRequest({method: 'fetch', quoteId: quoteId});\r\n  },[sendRequest, quoteId]);\r\n\r\n  let comments;\r\n\r\n  if (status === 'pending'){\r\n    comments = (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\r\n    comments = <CommentsList quoteId={quoteId} comments={loadedComments} updateComments={updateCommentHandler}/>;\r\n  }\r\n\r\n  if (status === 'completed' && (loadedComments && loadedComments.length === 0)) {\r\n    comments = <p className='centered'>No comments were added yet!</p>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"comments\">\r\n      <h2>User Comments</h2>\r\n      {!isAddingComment && (\r\n        <button className='btn' onClick={startAddCommentHandler}>\r\n          Add a Comment\r\n        </button>\r\n      )}\r\n      {isAddingComment && \r\n        <NewCommentForm \r\n          quoteId={params.quoteId} \r\n          onAddedComment={addedCommentHandler}\r\n        />\r\n      }\r\n      { comments }\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","import './HighlightedQuote.scss';\n\nconst HighlightedQuote = (props) => {\n\n  return (\n    <figure className=\"quote\">\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../comments/Comments\";\r\nimport HighlightedQuote from '../quotes/HighlightedQuote';\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { getSingleQuote } from '../../lib/api';\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n\r\n    const match = useRouteMatch();\r\n\r\n    const params = useParams();\r\n\r\n    const { quoteId } = params;\r\n\r\n    const { sendRequest, data: loadedQuote, error, status } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    },[sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return(\r\n            <div className=\"centered\">\r\n                <LoadingSpinner/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return(\r\n            <p className=\"centered focused\">{error}</p>\r\n        );\r\n    }\r\n\r\n    if(!loadedQuote.text){\r\n        return(<p>No Quote Found!</p>);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h1>Quote detail</h1>\r\n\r\n            <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text}/>\r\n\r\n            <Route exact path={match.path}>\r\n                <Link to={`${match.url}/comments`} className=\"btn\">Show Comments</Link>\r\n            </Route>\r\n                       \r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments/>\r\n            </Route>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","data","error","status","useState","isSending","setIsSending","useEffect","onAddedComment","submitFormHandler","event","preventDefault","commentData","text","current","value","quoteId","className","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","onClick","deleteComment","commentId","deleteCommentHandler","updateComments","comments","map","comment","params","useParams","commentsManager","loadedComments","isAddingComment","setIsAddingComment","addedCommentHandler","useCallback","method","length","author","match","useRouteMatch","getSingleQuote","loadedQuote","exact","path","to","url"],"sourceRoot":""}